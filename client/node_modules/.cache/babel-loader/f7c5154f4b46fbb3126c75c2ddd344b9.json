{"ast":null,"code":"var _jsxFileName = \"/Users/accountx/Desktop/Challenge-Module22-BC/client/src/pages/Detail.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif';\nimport { UPDATE_PRODUCTS, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART } from '../utils/actions';\nimport Cart from \"../components/Cart/Cart\";\nimport { idbPromise } from \"../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction Detail() {\n  const state = useSelector(state => {\n    return state;\n  });\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useParams();\n  const [currentProduct, setCurrentProduct] = useState({});\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  const {\n    products,\n    cart\n  } = state;\n  useEffect(() => {\n    // data already in the global state\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } else if (data) {\n      // retrieve data from the server\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      }); //  store that data in IndexedDB\n\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      }); // when the user is offline, use the cached data in IndexedDB\n    } else if (!loading) {\n      idbPromise('products', 'get').then(indexedProducts => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === id); // when the product is already in the cart, update the quantity instead of adding duplicate items\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      }); //  also store in IndexedDB\n\n      idbPromise('cart', 'put', { ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      }); // when the product is not yet in the cart, add it\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct,\n          purchaseQuantity: 1\n        }\n      }); //  also store in IndexedDB\n\n      idbPromise('cart', 'put', { ...currentProduct,\n        purchaseQuantity: 1\n      });\n    }\n  };\n\n  const removeFromCart = () => {\n    // remove the product from the cart\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    }); // update IndexedDB to reflect the deleted product\n\n    idbPromise('cart', 'delete', { ...currentProduct\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, currentProduct ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"\\u2190 Back to Products\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, currentProduct.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, currentProduct.description), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, \"Price:\"), \"$\", currentProduct.price, \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addToCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"Add to Cart\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !cart.find(p => p._id === currentProduct._id),\n    onClick: removeFromCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"Remove from Cart\")), /*#__PURE__*/React.createElement(\"img\", {\n    src: `/images/${currentProduct.image}`,\n    alt: currentProduct.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  })) : null, loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }\n  }) : null, /*#__PURE__*/React.createElement(Cart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }));\n}\n\n;\nexport default Detail;","map":{"version":3,"sources":["/Users/accountx/Desktop/Challenge-Module22-BC/client/src/pages/Detail.js"],"names":["React","useEffect","useState","Link","useParams","useQuery","QUERY_PRODUCTS","spinner","UPDATE_PRODUCTS","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","ADD_TO_CART","Cart","idbPromise","useDispatch","useSelector","Detail","state","dispatch","id","currentProduct","setCurrentProduct","loading","data","products","cart","length","find","product","_id","type","forEach","then","indexedProducts","addToCart","itemInCart","cartItem","purchaseQuantity","parseInt","removeFromCart","name","description","price","p","image"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\n\nimport { UPDATE_PRODUCTS, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART } from '../utils/actions';\n\nimport Cart from \"../components/Cart/Cart\";\n\nimport { idbPromise } from \"../utils/helpers\";\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction Detail() {\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  \n  const [currentProduct, setCurrentProduct] = useState({})\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  const { products, cart } = state;\n  \n  useEffect(() => {\n    // data already in the global state\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } else if (data) {\n      // retrieve data from the server\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      //  store that data in IndexedDB\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    // when the user is offline, use the cached data in IndexedDB\n    } else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    // when the product is already in the cart, update the quantity instead of adding duplicate items\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      //  also store in IndexedDB\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    // when the product is not yet in the cart, add it\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      //  also store in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    // remove the product from the cart\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n    // update IndexedDB to reflect the deleted product\n    idbPromise('cart', 'delete', { ...currentProduct })\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}